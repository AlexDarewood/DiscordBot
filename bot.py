#–ú–æ–¥—É–ª–∏
import discord
import youtube_dl
import shutil
import os
import random
import json
import requests
from os import system
from discord.ext import commands
from discord.utils import get
from discord.ext.commands import Bot
from booruComm import booruComm
from gelbooruCaller import gelbooruCaller
from UserCollection import UserCollection
from UserStatTracker import UserStatTracker
from auditor import Auditor
from UserLimiter import UserLimiter
from booruLib import booruLib
from filter import Filter
from clientConnections import ClientConnections

client = commands.Bot(command_prefix='ns!')
auditor = Auditor("audit.txt")
auditor.generateAuditLog()
auditLines = auditor.getInitialAuditLog()
users = UserCollection(auditLines)
userStats = UserStatTracker(users.getUsers(), auditLines)
gelbooruLimiter = UserLimiter()
ChannelFilter = Filter()
ClientConnector = ClientConnections()
ROLE = "SpaceüîÆ"
try:
    apiTokenFile = open('gelApiKey.config','r')
    apiToken = apiTokenFile.readline()
    apiTokenFile.close()
except OSError:
    print("No gelApiKey.config file found for a gelbooru api key, no api key will be used and you will not be able to access blacklisted content.")
#C–æ–±—ã—Ç–∏—è
@client.event
async def on_member_join(member):
    role = get(member.guild.roles, name=ROLE)
    await member.add_roles(role)
    print(f"{member} was given {role}")

@client.event
async def on_ready():
    await client.change_presence(status=discord.Status.online, activity=discord.Game('–æ—á–∫–µ –î–∏–º—ã'))
    print('Bot is ready.')

#–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ñ–∞–Ω–∞
@client.command(aliases=['d'])
async def dice(ctx):
    dice = ['1','2','3','4','5','6']
    await ctx.send(f'–ë—Ä–æ—Å–∞—é –∫—É–±–∏–∫–∏\n–í—ã–ø–∞–ª–æ: {random.choice(dice)} –∏ {random.choice(dice)} ')

@client.command(aliases=['ball','8'])
async def _8ball(ctx, * , question):
    responses = ['–î–∞ —ç—Ç–æ —Ç–∞–∫.',
    '–ù–∞—Å–∫–æ–ª—å–∫–æ —è –≤–∏–∂—É - –¥–∞.',
    '–ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ.',
    '–ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç —á—Ç–æ –¥–∞.',
    '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ —Ö–æ—Ä–æ—à–∞—è.',
    '–ê–±—Å–æ–ª—é—Ç–Ω–æ.',
    '–î–ê!',
    '–≠—Ç–æ –±–µ—Å—Å–ø–æ—Ä–Ω–æ.',
    '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞.',
    '–î–∞ —ç—Ç–æ —Ç–∞–∫.',
    '–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è.',
    '–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –¥–∞.',
    '–ú–æ–∂–µ—Ç –±—ã—Ç—å.',
    '–õ—É—á—à–µ —Å–µ–π—á–∞—Å –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–µ–±–µ.',
    '–¢—ã –º–æ–∂–µ—à—å –Ω–∞–¥–µ—è—Ç—å—Å—è –Ω–∞ —ç—Ç–æ.',
    '–û—á–µ–Ω—å —Å–æ–º–Ω–µ–≤–∞—é—Å—å.',
    '–ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç —á—Ç–æ –Ω–µ—Ç.',
    '–Ø —Ç–∞–∫ –Ω–µ –¥—É–º–∞—é.',
    '–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç.',
    '–ò–∑–≤–∏–Ω–∏, –Ω–µ—Ç.',
    '–ù–µ —Ä–∞—Å—á–∏—Ç—ã–≤–∞–π –Ω–∞ —ç—Ç–æ.',
    '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è.',
    '–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ.',
    '–ù–µ –º–æ–≥—É —Å–µ–π—á–∞—Å —Å–∫–∞–∑–∞—Ç—å.',
    '–°–æ–±–µ—Ä–∏—Å—å —Å –º—ã—Å–ª—è–º–∏ –∏ —Å–ø—Ä–æ—Å–∏ —Å–Ω–æ–≤–∞.']
    await ctx.send(f'–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {random.choice(responses)}')

@client.command(aliases=['delete','del'])
async def clear(ctx, amount=15):
    await ctx.channel.purge(limit=amount) 
    await ctx.send(f'–£–¥–∞–ª–µ–Ω–æ: {amount}')

@client.command(aliases=[])
async def hug(ctx):
    huggif = ["""https://tenor.com/view/animated-snuggle-cute-hug-gif-8330887""",
    """https://media.tenor.com/images/11157eb0fe0b7b0f296a8066dffa39a7/tenor.gif""",
    """https://tenor.com/view/hug-anime-gif-7552075""",
    """https://tenor.com/view/anime-hug-sweet-love-gif-14246498""",
    """https://tenor.com/view/hug-cuddle-comfort-love-friends-gif-5166500""",
    """https://tenor.com/view/anime-bed-bedtime-sleep-night-gif-12375072""",
    """https://tenor.com/view/loli-lolita-anime-kawaii-sad-gif-5640885"""]
    await ctx.send(f'–î–µ—Ä–∂–∏ –æ–±–Ω–∏–º–∞—à–∫–∏\n{random.choice(huggif)} ' + ctx.message.author.mention)

@client.command(aliases=[])
async def slap(ctx):
    react = ["–ó–∞–∫—Ä–æ–π –µ–±–ª–µ—Ç",
     "–õ–æ–≤–∏","–ù–´–ê!!!",
     "–©–∞ –∫–∞–∫ —É–µ–±—É —Å–∫–∞",
      "–ê –ø–æ –∂–æ–ø–µ"]
    slapgif = ["""https://tenor.com/view/batman-slap-robin-gif-10206784""",
    """https://tenor.com/view/gap-slapped-knockout-punch-gif-5122019""",
    """https://tenor.com/view/slap-bears-gif-10422113""",
    """https://tenor.com/view/about-to-slap-had-enough-shut-up-shut-it-mostly-sane-gif-14128541""",
    """https://tenor.com/view/tom-and-jerry-slap-slapping-butt-slap-spanking-gif-4517373"""]
    await ctx.send(f'{random.choice(react)}\n{random.choice(slapgif)} ' + ctx.message.author.mention)

@client.command(aliases=['aquo'])
async def addquote(ctx, *, quote): 
    quo = open('quotes.txt','a')
    quo.writelines(quote +' –¶–∏—Ç–∞—Ç–∞: ' + ctx.message.author.mention)
    quo.writelines('\n')
    quo.close()

@client.command(aliases=['quo'])
async def quote(ctx):
 await ctx.send(random.choice(list(open('quotes.txt'))))

#–•–µ–Ω—Ç–∞–π-–∫–æ–º–∞–Ω–¥–∞
@client.command(aliases=['nsfw'])
async def gel(ctx, *, arg):
    extremeFiltering = False
    # if isExplicitlyFiltered(ctx, arg):
    #     await ctx.send("Invalid tag entered in request.")
    #     return False
        
    if(ClientConnector.isChannelFiltered(ctx.guild.id)):
        extremeFiltering = False
        if not ChannelFilter.isArgClean(arg.split(' ')):
            await ctx.send("–¢–∞–∫–æ–µ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–ª—å–∑—è!")
            return False #breaks out from executing the command any further
    
    userLimited = True
    if(gelbooruLimiter.checkIfLimited(str(ctx.message.author)) == False):
        userLimited = False
        gelbooruLimiter.limitUser(str(ctx.message.author))

    caller = gelbooruCaller(ctx, apiToken, arg)
    caller.setArgs()
    caller.makeRequest(extremeFiltering)
    response = caller.getContent()

    if not userLimited:
        if response != None:
            auditor.audit(str(ctx.message.author), response["auditMessage"][0], response["auditMessage"][1], "gelbooru")
            await ctx.send(response["response"])
            userStats.updateStats(str(ctx.message.author))
            if(response["sendTags"]):
                await ctx.send("–Ø –Ω–∞—à–ª–∞ –¥–ª—è —Ç–µ–±—è –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ —ç—Ç–∏–º —Ç–µ–≥–∞–º!–†–∞–¥—É–π—Å—è ,—á–µ—Ä—Ç–æ–≤ –¥—Ä–æ—á–µ—Ä: \n```" + response["tags"]+"```\n")
        else:
            await ctx.send("–£ —Ç–∞–∫–æ–≥–æ —Ç–µ–≥–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –±–æ–ª—å–Ω–æ–π —É–±–ª—é–¥–æ–∫, " + ctx.message.author.mention)
    elif arg==0:
        await ctx.send("–ë–∞–∫–∞!–¢—ã –∑–∞–±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å —Ç—ç–≥ UwU " + ctx.message.author.mention)

#–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ-–∫–æ–º–∞–Ω–¥—ã

@client.command(pass_context=True, aliases=['j', 'joi'])
async def join(ctx):
    channel = ctx.message.author.voice.channel
    voice = get(client.voice_clients, guild=ctx.guild)

    if voice is not None:
        return await voice.move_to(channel)

    await channel.connect()

    await ctx.send(f"–ü–æ–¥–∫–ª—é—á–∏–ª–∞—Å—å –∫ {channel}")

@client.command(pass_context=True, aliases=['l', 'lea'])
async def leave(ctx):
    channel = ctx.message.author.voice.channel
    voice = get(client.voice_clients, guild=ctx.guild)

    if voice and voice.is_connected():
        await voice.disconnect()
        print(f"The client has left {channel}")
        await ctx.send(f"–ü–æ–∫–∏–Ω—É–ª–∞ {channel}")
    else:
        print("Bot was told to leave voice channel, but was not in one")
        await ctx.send("–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

@client.command(pass_context=True, aliases=['p', 'pla'])
async def play(ctx, *url: str):
     
    def check_queue():
        Queue_infile = os.path.isdir("./Queue")
        if Queue_infile is True:
            DIR = os.path.abspath(os.path.realpath("Queue"))
            length = len(os.listdir(DIR))
            still_q = length - 1
            try:
                first_file = os.listdir(DIR)[0]
            except:
                print("No more queued song(s)\n")
                queues.clear()
                return
            main_location = os.path.dirname(os.path.realpath(__file__))
            song_path = os.path.abspath(os.path.realpath("Queue") + "\\" + first_file)
            if length != 0:
                print("Song done, playing next queued\n")
                print(f"Songs still in queue: {still_q}")
                song_there = os.path.isfile("song.mp3")
                if song_there:
                    os.remove("song.mp3")
                shutil.move(song_path, main_location)
                for file in os.listdir("./"):
                    if file.endswith(".mp3"):
                        os.rename(file, 'song.mp3')

                voice.play(discord.FFmpegPCMAudio("song.mp3"), after=lambda e: check_queue())
                voice.source = discord.PCMVolumeTransformer(voice.source)
                voice.source.volume = 0.07

            else:
                queues.clear()
                return

        else:
            queues.clear()
            print("No songs were queued before the ending of the last song\n")



    song_there = os.path.isfile("song.mp3")
    try:
        if song_there:
            os.remove("song.mp3")
            queues.clear()
            print("Removed old song file")
    except PermissionError:
        print("Trying to delete song file, but it's being played")
        await ctx.send("–ü–µ—Å–Ω—è —É–∂–µ –∏–≥—Ä–∞–µ—Ç")
        return


    Queue_infile = os.path.isdir("./Queue")
    try:
        Queue_folder = "./Queue"
        if Queue_infile is True:
            print("Removed old Queue Folder")
            shutil.rmtree(Queue_folder)
    except:
        print("No old Queue folder")

    await ctx.send("–ì–æ—Ç–æ–≤–ª—é—Å—å –≤–∫–ª—é—á–∞—Ç—å")

    voice = get(client.voice_clients, guild=ctx.guild)

    ydl_opts = {
        'format': 'bestaudio/best',
        'quiet': False,
        'outtmpl': "./song.mp3",
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }

    song_search = " ".join(url)

    try:
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            print("Downloading audio now\n")
            ydl.download([f"ytsearch1:{song_search}"])
    except:
        print("FALLBACK: youtube-dl does not support this URL, using Spotify (This is normal if Spotify URL)")
        c_path = os.path.dirname(os.path.realpath(__file__))
        system("spotdl -ff song -f " + '"' + c_path + '"' + " -s " + song_search)

    voice.play(discord.FFmpegPCMAudio("song.mp3"), after=lambda e: check_queue())
    voice.source = discord.PCMVolumeTransformer(voice.source)
    voice.source.volume = 0.07

@client.command(pass_context=True, aliases=['pa', 'pau'])
async def pause(ctx):

    voice = get(client.voice_clients, guild=ctx.guild)

    if voice and voice.is_playing():
        print("Music paused")
        voice.pause()
        await ctx.send("–ü–µ—Å–Ω—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        print("Music not playing failed pause")
        await ctx.send("–ü–µ—Å–µ–Ω –Ω–µ—Ç –Ω–µ—á–µ–≥–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É")

@client.command(pass_context=True, aliases=['r', 'res'])
async def resume(ctx):

    voice = get(client.voice_clients, guild=ctx.guild)

    if voice and voice.is_paused():
        print("Resumed music")
        voice.resume()
        await ctx.send("–ü–µ—Å–Ω—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        print("Music is not paused")
        await ctx.send("–ü–µ—Å–Ω—è –Ω–µ –æ—Å—Ç–∞–≤–Ω–æ–≤–ª–µ–Ω–∞ ,—á—Ç–æ –±—ã –µ—ë –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å")

@client.command(pass_context=True, aliases=['s', 'sto'])
async def stop(ctx):
    voice = get(client.voice_clients, guild=ctx.guild)

    queues.clear()

    queue_infile = os.path.isdir("./Queue")
    if queue_infile is True:
        shutil.rmtree("./Queue")

    if voice and voice.is_playing():
        print("Music stopped")
        voice.stop()
        await ctx.send("–ü–µ—Å–Ω—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        print("No music playing failed to stop")
        await ctx.send("–ü–µ—Å–µ–Ω –Ω–µ—Ç - –Ω–µ—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å")

queues = {}

@client.command(pass_context=True, aliases=['q', 'que'])
async def queue(ctx, *url: str):
    Queue_infile = os.path.isdir("./Queue")
    if Queue_infile is False:
        os.mkdir("Queue")
    DIR = os.path.abspath(os.path.realpath("Queue"))
    q_num = len(os.listdir(DIR))
    q_num += 1
    add_queue = True
    while add_queue:
        if q_num in queues:
            q_num += 1
        else:
            add_queue = False
            queues[q_num] = q_num

    queue_path = os.path.abspath(os.path.realpath("Queue") + f"\song{q_num}.%(ext)s")

    ydl_opts = {
        'format': 'bestaudio/best',
        'quiet': True,
        'outtmpl': queue_path,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }

    song_search = " ".join(url)

    try:
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            print("Downloading audio now\n")
            ydl.download([f"ytsearch1:{song_search}"])
    except:
        print("FALLBACK: youtube-dl does not support this URL, using Spotify (This is normal if Spotify URL)")
        q_path = os.path.abspath(os.path.realpath("Queue"))
        system(f"spotdl -ff song{q_num} -f " + '"' + q_path + '"' + " -s " + song_search)


    await ctx.send("–î–æ–±–∞–≤–ª—è—é –ø–µ—Å–Ω—é " + str(q_num) + " –≤ –æ—á–µ—Ä–µ–¥—å")

    print("Song added to queue\n")

@client.command(pass_context=True, aliases=['n', 'nex'])
async def next(ctx):
    voice = get(client.voice_clients, guild=ctx.guild)

    if voice and voice.is_playing():
        print("Playing Next Song")
        voice.stop()
        await ctx.send("–°–ª–µ–¥—É—é—â–∞—è –ø–µ—Å–Ω—è")
    else:
        print("No music playing")
        await ctx.send("–ü–µ—Å–µ–Ω –Ω–µ—Ç")

@client.command(pass_context=True, aliases=['v', 'vol'])
async def volume(ctx, volume: int):

    if ctx.voice_client is None:
        return await ctx.send("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É")

    print(volume/100)

    ctx.voice_client.source.volume = volume / 100
    await ctx.send(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ {volume}%")

client.run("NjA1MDM1NDE2MjAyMjQ4MjE2.XopJWg.F_VEEUtf31LPl2Eo9yTqo8heZbk")
